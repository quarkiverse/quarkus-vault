name: Transit
category: secrets

operations:

- name: createKey
  method: POST
  status: OK_OR_NO_CONTENT
  path: keys/:name
  parameters:
  - name: name
    type: String
  - name: params
    body: true
    object:
    - name: convergentEncryption
      type: Boolean
    - name: derived
      type: Boolean
    - name: exportable
      type: Boolean
    - name: allowPlaintextBackup
      type: Boolean
    - name: type
      type: $KeyType
    - name: keySize
      type: Integer
    - name: autoRotatePeriod
      type: java.time.Duration
    - name: managedKeyName
      type: String
    - name: managedKeyId
      type: String
  result:
    kind: leased
    unwrapUsing: "Optional.ofNullable(r).map(VaultLeasedResult::getData)"
    unwrappedType: java.util.Optional<$KeyInfo>
    dataType: $KeyInfo


- name: importKey
  method: POST
  path: keys/:name/import
  parameters:
  - name: name
    type: String
  - name: params
    body: true
    object:
    - name: ciphertext
      type: String
    - name: hashFunction
      type: $HashFunction
    - name: type
      type: $KeyType
    - name: publicKey
      type: String
    - name: allowRotation
      type: Boolean
    - name: derived
      type: Boolean
    - name: context
      type: String
    - name: exportable
      type: Boolean
    - name: allowPlaintextBackup
      type: Boolean
    - name: autoRotatePeriod
      type: java.time.Duration


- name: importKeyVersion
  method: POST
  path: keys/:name/import_version
  parameters:
  - name: name
    type: String
  - name: params
    body: true
    object:
    - name: ciphertext
      type: String
    - name: hashFunction
      type: $HashFunction
    - name: publicKey
      type: String
    - name: version
      type: Integer


- name: getWrappingKey
  method: GET
  path: wrapping_key
  result:
    kind: leased
    unwrapUsing: r.getData().getPublicKey()
    unwrappedType: String
    data:
    - name: publicKey
      type: String


- name: listKeys
  method: LIST
  path: keys
  result:
    kind: leased
    unwrapUsing: r.getData().getKeys()
    unwrappedType: java.util.List<String>
    data:
    - name: keys
      type: java.util.List<String>
  recoverNotFound:
    using: $T.of()
    arguments:
      - <type>java.util.List


- name: readKey
  method: GET
  path: keys/:name
  parameters:
  - name: name
    type: String
  result:
    kind: leased
    unwrapData: true
    dataType: $KeyInfo


- name: deleteKey
  method: DELETE
  path: keys/:name
  parameters:
  - name: name
    type: String


- name: updateKey
  method: POST
  path: keys/:name/config
  parameters:
  - name: name
    type: String
  - name: params
    body: true
    object:
    - name: minDecryptionVersion
      type: Integer
    - name: minEncryptionVersion
      type: Integer
    - name: deletionAllowed
      type: Boolean
    - name: exportable
      type: Boolean
    - name: allowPlaintextBackup
      type: Boolean
    - name: autoRotatePeriod
      type: java.time.Duration


- name: rotateKey
  method: POST
  path: keys/:name/rotate
  parameters:
  - name: name
    type: String
  - name: params
    body: true
    object:
    - name: managedKeyName
      type: String
    - name: managedKeyId
      type: String


- name: signCsr
  method: POST
  path: keys/:name/csr
  parameters:
  - name: name
    type: String
  - name: params
    object:
    - name: version
      type: String
    - name: csr
      type: String
  result:
    kind: leased
    unwrapData: true
    data:
    - name: name
      type: String
    - name: version
      type: Integer
    - name: csr
      type: String


- name: setCertificateChain
  method: POST
  path: keys/:name/set-certificate
  parameters:
  - name: name
    type: String
  - name: version
    type: String
  - name: certificateChain
    type: String


- name: secureExportKey
  method: GET
  path: byok-export/:destination/:source/:version
  parameters:
  - name: destination
    type: String
  - name: source
    type: String
  - name: version
    type: String
  result:
    kind: leased
    unwrapData: true
    data:
    - name: name
      type: String
    - name: keys
      type: java.util.Map<String, String>


- name: exportKey
  method: GET
  path: export/:keyType/:name/:version
  parameters:
  - name: keyType
    type: $ExportKeyType
  - name: name
    type: String
  - name: version
    type: String
  result:
    kind: leased
    unwrapData: true
    data:
    - name: name
      type: String
    - name: keys
      type: java.util.Map<String, String>


- name: readKeysConfig
  method: GET
  path: config/keys
  result:
    kind: leased
    unwrapData: true
    data:
    - name: disableUpsert
      type: Boolean


- name: updateKeysConfig
  method: POST
  path: config/keys
  parameters:
  - name: params
    body: true
    object:
    - name: disableUpsert
      type: Boolean


- name: encrypt
  method: POST
  path: encrypt/:name
  parameters:
  - name: name
    type: String
  - name: params
    body: true
    object:
    - name: plaintext
      type: byte[]
    - name: associatedData
      type: byte[]
    - name: context
      type: byte[]
    - name: keyVersion
      type: Integer
    - name: type
      type: $KeyType
    - name: convergentEncryption
      type: Boolean
  result:
    kind: leased
    unwrapData: true
    data:
    - name: ciphertext
      type: String
    - name: keyVersion
      type: Integer


- name: encryptBatch
  method: POST
  path: encrypt/:name
  parameters:
  - name: name
    type: String
  - name: params
    body: true
    type: $EncryptBatchParams
  result:
    kind: leased
    unwrapUsing: r.getData().getBatchResults()
    unwrappedType: java.util.List<$EncryptResultBatchItem>
    data:
    - name: batchResults
      type: java.util.List<$EncryptResultBatchItem>


- name: decrypt
  method: POST
  path: decrypt/:name
  parameters:
  - name: name
    type: String
  - name: params
    body: true
    object:
    - name: ciphertext
      type: String
    - name: associatedData
      type: byte[]
    - name: context
      type: byte[]
  result:
    kind: leased
    unwrapUsing: r.getData().getPlaintext()
    unwrappedType: byte[]
    data:
    - name: plaintext
      type: byte[]


- name: decryptBatch
  method: POST
  path: decrypt/:name
  parameters:
  - name: name
    type: String
  - name: params
    body: true
    type: $DecryptBatchParams
  result:
    kind: leased
    unwrapUsing: r.getData().getBatchResults()
    unwrappedType: java.util.List<$DecryptResultBatchItem>
    data:
    - name: batchResults
      type: java.util.List<$DecryptResultBatchItem>


- name: rewrap
  method: POST
  path: rewrap/:name
  parameters:
  - name: name
    type: String
  - name: params
    body: true
    object:
    - name: ciphertext
      type: String
    - name: context
      type: byte[]
    - name: keyVersion
      type: Integer
    - name: type
      type: $KeyType
  result:
    kind: leased
    unwrapData: true
    data:
    - name: ciphertext
      type: String
    - name: keyVersion
      type: Integer


- name: rewrapBatch
  method: POST
  path: rewrap/:name
  parameters:
  - name: name
    type: String
  - name: params
    body: true
    type: $RewrapBatchParams
  result:
    kind: leased
    unwrapUsing: r.getData().getBatchResults()
    unwrappedType: java.util.List<$RewrapResultBatchItem>
    data:
    - name: batchResults
      type: java.util.List<$RewrapResultBatchItem>


- name: generateDataKey
  method: POST
  path: datakey/:type/:name
  parameters:
  - name: type
    type: $DataKeyType
  - name: name
    type: String
  - name: params
    body: true
    type: $GenerateDataKeyParams
  result:
    kind: leased
    unwrapData: true
    data:
      - name: ciphertext
        type: String
      - name: plaintext
        type: String


- name: random
  method: POST
  path: random/:source/:bytes
  bodyFrom: [format]
  parameters:
  - name: bytes
    type: Integer
  - name: source
    type: $$.api.common.VaultRandomSource
  - name: format
    type: $$.api.common.VaultFormat
  result:
    kind: leased
    unwrapUsing: r.getData().getBytes(format)
    unwrappedType: byte[]
    dataType: $RandomData


- name: hash
  method: POST
  path: hash/:algorithm
  bodyFrom: [input, format]
  parameters:
  - name: algorithm
    type: $$.api.common.VaultHashAlgorithm
  - name: input
    type: byte[]
  - name: format
    type: $$.api.common.VaultFormat
  result:
    kind: leased
    unwrapUsing: r.getData().getSum()
    unwrappedType: String
    data:
    - name: sum
      type: String


- name: hmac
  method: POST
  path: hmac/:name
  bodyFrom: [algorithm, input, keyVersion]
  parameters:
  - name: name
    type: String
  - name: algorithm
    type: $$.api.common.VaultHashAlgorithm
  - name: input
    type: byte[]
  - name: keyVersion
    type: Integer
  result:
    kind: leased
    unwrapUsing: r.getData().getHmac()
    unwrappedType: String
    data:
    - name: hmac
      type: String


- name: hmacBatch
  method: POST
  path: hmac/:name
  parameters:
  - name: name
    type: String
  - name: params
    body: true
    type: $HmacBatchParams
  result:
    kind: leased
    unwrapUsing: r.getData().getBatchResults()
    unwrappedType: java.util.List<$HmacResultBatchItem>
    data:
    - name: batchResults
      type: java.util.List<$HmacResultBatchItem>


- name: sign
  method: POST
  path: sign/:name
  parameters:
  - name: name
    type: String
  - name: params
    body: true
    object:
    - name: input
      type: byte[]
    - name: context
      type: byte[]
    - name: hashAlgorithm
      type: $$.api.common.VaultHashAlgorithm
    - name: keyVersion
      type: Integer
    - name: prehashed
      type: Boolean
    - name: signatureAlgorithm
      type: $SignatureAlgorithm
    - name: marshalingAlgorithm
      type: $MarshalingAlgorithm
    - name: saltLength
      type: Integer
  result:
    kind: leased
    unwrapData: true
    data:
    - name: signature
      type: String
    - name: publicKey
      type: byte[]
    - name: keyVersion
      type: Integer


- name: signBatch
  method: POST
  path: sign/:name
  parameters:
  - name: name
    type: String
  - name: params
    body: true
    type: $SignBatchParams
  result:
    kind: leased
    unwrapUsing: r.getData().getBatchResults()
    unwrappedType: java.util.List<$SignResultBatchItem>
    data:
    - name: batchResults
      type: java.util.List<$SignResultBatchItem>


- name: verify
  method: POST
  path: verify/:name
  parameters:
  - name: name
    type: String
  - name: params
    body: true
    object:
    - name: input
      type: byte[]
    - name: signature
      type: String
    - name: hmac
      type: String
    - name: context
      type: byte[]
    - name: hashAlgorithm
      type: $$.api.common.VaultHashAlgorithm
    - name: prehashed
      type: Boolean
    - name: signatureAlgorithm
      type: $SignatureAlgorithm
    - name: marshalingAlgorithm
      type: $MarshalingAlgorithm
    - name: saltLength
      type: Integer
  result:
    kind: leased
    unwrapUsing: r.getData().isValid()
    unwrappedType: Boolean
    data:
    - name: valid
      type: Boolean


- name: verifyBatch
  method: POST
  path: verify/:name
  parameters:
  - name: name
    type: String
  - name: params
    body: true
    type: $VerifyBatchParams
  result:
    kind: leased
    unwrapUsing: r.getData().getBatchResults()
    unwrappedType: java.util.List<$VerifyResultBatchItem>
    data:
    - name: batchResults
      type: java.util.List<$VerifyResultBatchItem>


- name: backupKey
  method: GET
  path: backup/:name
  parameters:
  - name: name
    type: String
  result:
    kind: leased
    unwrapUsing: r.getData().getBackup()
    unwrappedType: String
    data:
    - name: backup
      type: String


- name: restoreKey
  method: POST
  path: restore/:name
  bodyFrom: [backup, force]
  parameters:
  - name: name
    type: String
  - name: backup
    type: String
  - name: force
    type: Boolean


- name: trimKey
  method: POST
  path: keys/:name/trim
  bodyFrom: [minAvailableVersion]
  parameters:
  - name: name
    type: String
  - name: minAvailableVersion
    type: Integer


- name: updateCacheConfig
  method: POST
  path: cache-config
  bodyFrom: [size]
  parameters:
  - name: size
    type: Integer


- name: readCacheConfig
  method: GET
  path: cache-config
  result:
    kind: leased
    unwrapUsing: r.getData().getSize()
    unwrappedType: Integer
    data:
    - name: size
      type: Integer


############################################################################################################

types:

- name: VerifyBatchItem
  properties:
  - name: input
    type: byte[]
  - name: signature
    type: String
  - name: hmac
    type: String
  - name: context
    type: byte[]
  - name: reference
    type: String


- name: VerifyBatchParams
  properties:
  - name: batchInput
    type: java.util.List<$VerifyBatchItem>
  - name: hashAlgorithm
    type: $$.api.common.VaultHashAlgorithm
  - name: prehashed
    type: Boolean
  - name: signatureAlgorithm
    type: $SignatureAlgorithm
  - name: marshalingAlgorithm
    type: $MarshalingAlgorithm
  - name: saltLength
    type: Integer
  methods:
  - name: addBatchItem
    parameters:
      item: $VerifyBatchItem
    returnType: $VerifyBatchParams
    body: |
      if (batchInput == null) {
        batchInput = new $list:T<>();
      }
      batchInput.add(item);
      return this;
    bodyArguments:
      list: <type>java.util.ArrayList


- name: VerifyResultBatchItem
  properties:
  - name: valid
    type: Boolean
  - name: reference
    type: String
  - name: error
    type: String


- name: SignBatchItem
  properties:
  - name: input
    type: byte[]
  - name: context
    type: byte[]
  - name: reference
    type: String

- name: SignBatchParams
  properties:
  - name: batchInput
    type: java.util.List<$SignBatchItem>
  - name: hashAlgorithm
    type: $$.api.common.VaultHashAlgorithm
  - name: keyVersion
    type: Integer
  - name: prehashed
    type: Boolean
  - name: signatureAlgorithm
    type: $SignatureAlgorithm
  - name: marshalingAlgorithm
    type: $MarshalingAlgorithm
  - name: saltLength
    type: Integer
  methods:
  - name: addBatchItem
    parameters:
      item: $SignBatchItem
    returnType: $SignBatchParams
    body: |
      if (batchInput == null) {
        batchInput = new $list:T<>();
      }
      batchInput.add(item);
      return this;
    bodyArguments:
      list: <type>java.util.ArrayList


- name: SignResultBatchItem
  properties:
  - name: signature
    type: String
  - name: publicKey
    serializedName: publickey
    type: byte[]
  - name: keyVersion
    type: Integer
  - name: reference
    type: String
  - name: error
    type: String


- name: HmacBatchItem
  properties:
  - name: input
    type: byte[]
  - name: reference
    type: String


- name: HmacBatchParams
  properties:
  - name: batchInput
    type: java.util.List<$HmacBatchItem>
  - name: algorithm
    type: $$.api.common.VaultHashAlgorithm
  - name: keyVersion
    type: Integer
  methods:
  - name: addBatchItem
    parameters:
      item: $HmacBatchItem
    returnType: $HmacBatchParams
    body: |
      if (batchInput == null) {
        batchInput = new $list:T<>();
      }
      batchInput.add(item);
      return this;
    bodyArguments:
      list: <type>java.util.ArrayList


- name: HmacResultBatchItem
  properties:
  - name: hmac
    type: String
  - name: reference
    type: String
  - name: error
    type: String


- name: RewrapBatchItem
  properties:
    - name: ciphertext
      type: String
    - name: context
      type: byte[]
    - name: keyVersion
      type: Integer
    - name: reference
      type: String


- name: RewrapBatchParams
  properties:
  - name: batchInput
    type: java.util.List<$RewrapBatchItem>
  - name: partialFailureResponseCode
    type: Integer
  methods:
  - name: allowPartialFailure
    returnType: $RewrapBatchParams
    body: |
      partialFailureResponseCode = 200;
      return this;
  - name: addBatchItem
    parameters:
      item: $RewrapBatchItem
    returnType: $RewrapBatchParams
    body: |
      if (batchInput == null) {
        batchInput = new $list:T<>();
      }
      batchInput.add(item);
      return this;
    bodyArguments:
      list: <type>java.util.ArrayList


- name: RewrapResultBatchItem
  properties:
    - name: ciphertext
      type: String
    - name: keyVersion
      type: Integer
    - name: reference
      type: String
    - name: error
      type: String


- name: EncryptBatchItem
  properties:
  - name: plaintext
    type: byte[]
  - name: associatedData
    type: byte[]
  - name: context
    type: byte[]
  - name: reference
    type: String
  - name: keyVersion
    type: Integer


- name: EncryptBatchParams
  properties:
  - name: batchInput
    type: java.util.List<$EncryptBatchItem>
  - name: type
    type: $KeyType
  - name: convergentEncryption
    type: Boolean
  - name: partialFailureResponseCode
    type: Integer
  methods:
  - name: allowPartialFailure
    returnType: $EncryptBatchParams
    body: |
      partialFailureResponseCode = 200;
      return this;
  - name: addBatchItem
    parameters:
      item: $EncryptBatchItem
    returnType: $EncryptBatchParams
    body: |
      if (batchInput == null) {
        batchInput = new $list:T<>();
      }
      batchInput.add(item);
      return this;
    bodyArguments:
      list: <type>java.util.ArrayList


- name: EncryptResultBatchItem
  properties:
  - name: ciphertext
    type: String
  - name: keyVersion
    type: Integer
  - name: reference
    type: String
  - name: error
    type: String


- name: DecryptBatchItem
  properties:
  - name: ciphertext
    type: String
  - name: associatedData
    type: byte[]
  - name: context
    type: byte[]
  - name: reference
    type: String


- name: DecryptBatchParams
  properties:
  - name: batchInput
    type: java.util.List<$DecryptBatchItem>
  - name: partialFailureResponseCode
    type: Integer
  methods:
  - name: allowPartialFailure
    returnType: $DecryptBatchParams
    body: |
      partialFailureResponseCode = 200;
      return this;
  - name: addBatchItem
    parameters:
      item: $DecryptBatchItem
    returnType: $DecryptBatchParams
    body: |
      if (batchInput == null) {
        batchInput = new $list:T<>();
      }
      batchInput.add(item);
      return this;
    bodyArguments:
      list: <type>java.util.ArrayList


- name: DecryptResultBatchItem
  properties:
  - name: plaintext
    type: byte[]
  - name: reference
    type: String
  - name: error
    type: String


- name: KeyVersion
  properties:
  - name: name
    type: String
  - name: creationTime
    type: java.time.OffsetDateTime
  - name: certificateChain
    type: String
  - name: publicKey
    type: String


- name: KeyInfo
  properties:
  - name: allowPlaintextBackup
    type: Boolean
  - name: autoRotatePeriod
    type: java.time.Duration
  - name: deletionAllowed
    type: Boolean
  - name: derived
    type: Boolean
  - name: exportable
    type: Boolean
  - name: importedKey
    type: Boolean
  - name: keys
    type: java.util.Map<String, $KeyVersion>
  - name: latestVersion
    type: Integer
  - name: minAvailableVersion
    type: Integer
  - name: minDecryptionVersion
    type: Integer
  - name: minEncryptionVersion
    type: Integer
  - name: name
    type: String
  - name: supportsDecryption
    type: Boolean
  - name: supportsDerivation
    type: Boolean
  - name: supportsEncryption
    type: Boolean
  - name: supportsSigning
    type: Boolean
  - name: type
    type: $KeyType
  - name: convergentEncryption
    type: Boolean
  - name: convergentEncryptionVersion
    type: Integer

- name: RandomData
  properties:
    - name: randomBytes
      type: String
  methods:
    - name: getBytes
      returnType: byte[]
      parameters:
        format: $$.api.common.VaultFormat
      body: |
        if (format == null || format == $format:T.BASE64) {
          return $base64:T.getDecoder().decode(randomBytes);
        } else if (format == $format:T.HEX) {
          return $hex:T.of().parseHex(randomBytes);
        } else {
          throw new IllegalArgumentException("Unsupported format: " + format);
        }
      bodyArguments:
        format: <type>$$.api.common.VaultFormat
        base64: <type>java.util.Base64
        hex: <type>java.util.HexFormat


- name: GenerateDataKeyParams
  properties:
    - name: context
      type: String
    - name: nonce
      type: String
    - name: bits
      type: Integer

############################################################################################################

enums:
- name: KeyType
  values:
  - aes128-gcm96
  - aes256-gcm96
  - chacha20-poly1305
  - ed25519
  - ecdsa-p256
  - ecdsa-p384
  - ecdsa-p521
  - rsa-2048
  - rsa-3072
  - rsa-4096
  - hmac
  - managed_key

- name: HashFunction
  values:
  - SHA1
  - SHA256
  - SHA384
  - SHA512

- name: ExportKeyType
  values:
  - encryption-key
  - signing-key
  - hmac-key
  - public-key
  - certificate-chain

- name: SignatureAlgorithm
  values:
  - pss
  - pkcs1v15

- name: MarshalingAlgorithm
  values:
  - asn1
  - jws

- name: DataKeyType
  values:
    - plaintext
    - wrapped